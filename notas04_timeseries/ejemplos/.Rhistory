predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
# Crear el modelo XGBoost
xgb_model  <-
boost_tree(
trees = 1000,
learn_rate = 0.05,
min_n = 2,
tree_depth = 5,
loss_reduction = 0.01,
sample_size = 0.8,
stop_iter = 100
) %>%
set_engine("xgboost") %>%
set_mode("regression") %>%
fit(passengers ~ ., data = train_data)
# Realizar predicciones
predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1) +
geom_line(data = predictions, aes(x = seq_along(.pred) + train_size, y = .pred), color = "red", size = 1) +
labs(title = "Predicción de Pasajeros de Aerolínea con Random Forest",
x = "Observación",
y = "Número de Pasajeros") +
theme_minimal()
# Crear el modelo XGBoost
xgb_model  <-
boost_tree(
trees = 1000,
learn_rate = 0.05,
min_n = 2,
tree_depth = 5,
loss_reduction = 0.01,
sample_size = 0.8,
stop_iter = 200
) %>%
set_engine("xgboost") %>%
set_mode("regression") %>%
fit(passengers ~ ., data = train_data)
# Realizar predicciones
predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
set.seed(155)
# Crear el modelo XGBoost
xgb_model  <-
boost_tree(
trees = 1000,
learn_rate = 0.05,
min_n = 2,
tree_depth = 5,
loss_reduction = 0.01,
sample_size = 0.8,
stop_iter = 150
) %>%
set_engine("xgboost") %>%
set_mode("regression") %>%
fit(passengers ~ ., data = train_data)
# Realizar predicciones
predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
set.seed(155)
# Crear el modelo XGBoost
xgb_model  <-
boost_tree(
trees = 1000,
learn_rate = 0.05,
min_n = 2,
tree_depth = 5,
loss_reduction = 0.01,
sample_size = 0.8,
stop_iter = 100
) %>%
set_engine("xgboost") %>%
set_mode("regression") %>%
fit(passengers ~ ., data = train_data)
# Realizar predicciones
predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
library(tidyverse)
library(modeltime)
library(xgboost)
library(lubridate)
library(timetk)
library(dplyr)
library(parsnip)
# Cargar los datos
data("AirPassengers")
ap_df <- as.data.frame(AirPassengers)
# Crear un tibble con un índice de tiempo
ap_df <- tibble::tibble(
date = seq(from = as.Date("1949-01-01"),
by = "month",
length.out = length(AirPassengers)),
passengers = as.numeric(AirPassengers)
)
# Añadir características adicionales (mes, año)
ap_df <- ap_df %>%
mutate(month = month(date, label = TRUE),  # Añadir mes como factor
year = year(date)) %>%
select(-date)
# Crear una nueva columna para el retardo de 12 meses
ap_df <- ap_df %>%
mutate(lag_12 = lag(passengers, 12))
# Eliminar filas con NA (debido a la creación de la columna de retardo)
ap_df <- na.omit(ap_df)
# Eliminamos la columna de fecha para el modelo
# Dividir los datos
train_size <- floor(0.8 * nrow(ap_df))
train_data <- ap_df[1:train_size, ]
test_data <- ap_df[(train_size + 1):nrow(ap_df), ]
set.seed(155)
xgb_model  <-
boost_tree(
trees = 1000,
learn_rate = 0.05,
min_n = 2,
tree_depth = 5,
loss_reduction = 0.01,
sample_size = 0.8,
stop_iter = 100
) %>%
set_engine("xgboost") %>%
set_mode("regression") %>%
fit(passengers ~ ., data = train_data)
# Realizar predicciones
predictions <- xgb_model %>%
predict(new_data = test_data) %>%
bind_cols(test_data)
# Calcular el MAPE
mape <- mean(abs((predictions$.pred - predictions$passengers) / predictions$passengers)) * 100
# Imprimir el MAPE
cat("MAPE:", mape, "%\n")
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1) +
geom_line(data = predictions, aes(x = seq_along(.pred) + train_size, y = .pred), color = "red", size = 1) +
labs(title = "Predicción de Pasajeros de Aerolínea con Random Forest",
x = "Observación",
y = "Número de Pasajeros") +
theme_minimal()
ggplot() +
geom_line(data = train_data, aes(x = date, y = sales), color = "blue", size = 1, alpha = 0.7) +
geom_line(data = test_data, aes(x = date, y = sales), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Ventas Mensuales con XGBoost",
x = "Fecha",
y = "Ventas") +
theme_minimal()
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1) +
geom_line(data = test_data, aes(x = date, y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = seq_along(.pred) + train_size, y = .pred), color = "red", size = 1) +
labs(title = "Predicción de Pasajeros de Aerolínea con Random Forest",
x = "Observación",
y = "Número de Pasajeros") +
theme_minimal()
ggplot() +
geom_line(data = train_data, aes(x = date, y = passengers), color = "blue", size = 1, alpha = 0.7) +
geom_line(data = test_data, aes(x = date, y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal()
seq_along(passengers)
passengers
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1) +
geom_line(data = predictions, aes(x = seq_along(.pred) + train_size, y = .pred), color = "red", size = 1) +
labs(title = "Predicción de Pasajeros de Aerolínea con Random Forest",
x = "Observación",
y = "Número de Pasajeros") +
theme_minimal()
passengers
ggplot() +
geom_line(data = train_data, aes(x = date, y = passengers), color = "blue", size = 1, alpha = 0.7) +
geom_line(data = test_data, aes(x = date, y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal()
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1, alpha = 0.7) +
geom_line(data = test_data, aes(x = seq_along(passengers), y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal()
ggplot() +
geom_line(data = train_data, aes(x = date, y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") +
geom_line(data = test_data, aes(x = date, y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))  # Mejora en la escala del eje x
ggplot() +
geom_line(data = train_data, aes(x = date, y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") + # Línea de entrenamiento
geom_line(data = test_data, aes(x = date, y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months")  # Mejora en la escala del eje x para fechas
View(train_data)
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") + # Línea de entrenamiento
geom_line(data = test_data, aes(x = seq_along(passengers), y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = .key, y = .pred), color = "red", size = 1, alpha = 0.7) +
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Fecha",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months")  # Mejora en la escala del eje x para fechas
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") +  # Línea de entrenamiento
geom_line(data = test_data, aes(x = seq_along(passengers), y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = seq_along(.pred) + nrow(train_data), y = .pred), color = "red", size = 1, alpha = 0.7) +  # Línea de predicciones
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Observaciones",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_continuous(breaks = seq(1, nrow(train_data) + nrow(test_data), by = 12), labels = function(x) as.character(as.Date(x, origin = "1970-01-01")))  # Mejora en la escala del eje x
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") +  # Línea de entrenamiento
geom_line(data = test_data, aes(x = seq_along(passengers), y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = seq_along(.pred), y = .pred), color = "red", size = 1, alpha = 0.7) +  # Línea de predicciones
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Observaciones",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_continuous(breaks = seq(1, nrow(train_data) + nrow(test_data), by = 12), labels = function(x) as.character(as.Date(x, origin = "1970-01-01")))  # Mejora en la escala del eje x
ggplot() +
geom_line(data = train_data, aes(x = seq_along(passengers), y = passengers), color = "blue", size = 1, alpha = 0.7, linetype = "dashed") +  # Línea de entrenamiento
geom_line(data = test_data, aes(x = seq_along(passengers) + nrow(train_data), y = passengers), color = "green", size = 1, alpha = 0.7) +  # Línea verde para los datos reales del test
geom_line(data = predictions, aes(x = seq_along(.pred) + nrow(train_data), y = .pred), color = "red", size = 1, alpha = 0.7) +  # Línea de predicciones
labs(title = "Predicción de Pasajeros de Aerolínea con XGBoost",
x = "Observaciones",
y = "Número de Pasajeros") +
theme_minimal() +
scale_x_continuous(breaks = seq(1, nrow(train_data) + nrow(test_data), by = 12), labels = function(x) as.character(as.Date(x, origin = "1970-01-01")))  # Mejora en la escala del eje x
library(AnomalyDetection)
devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
library(dplyr)
data(raw_data)
View(raw_data)
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
res$anoms
View(raw_data)
#A veces puede interesar detectar las anomalías ocurridas sólo en un
#período reciente, para lo que se debe utilizar la siguiente expresión
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
only_last="day", plot=TRUE)
res$anoms
AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
only_last="day", plot=TRUE)
rlang::last_trace()
devtools::install_github("twitter/AnomalyDetection")
devtools::install_github("twitter/AnomalyDetection", force = TRUE)
remove.packages("rlang")
library(rlang)
install.packages("rlang")
remove.packages("glue")
remove.packages("cli")
remove.packages("stringi")
install.packages("glue")
install.packages("cli")
install.packages("stringi")
devtools::install_github("twitter/AnomalyDetection", force = TRUE)
library(AnomalyDetection)
library(dplyr)
data(raw_data)
#Con esta función se detectaría anomalía a lo largo de la serie tanto en
#sentido positivo como negativo
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
res
res$plot
help("AnomalyDetectionTs")
AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', only_last="day", plot=TRUE)
class(raw_data$timestamp)
class(raw_data$count)
as.POSIXct(raw_data$timestamp)
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
res$anoms
res$plot
class(raw_data$timestamp)
AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
help("as.POSIXct")
raw_data$timestamp <- as.POSIXct(raw_data$timestamp,
origin = "1860-01-01",
tz = "GMT")
raw_data$timestamp
AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=TRUE)
class(raw_data$timestamp)
library(plotly)
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies') %>%
layout(title = 'Anomaly Detection', xaxis = list(title = 'Timestamp'), yaxis = list(title = 'Count'))
memory.limit(size = 16000)  # Ajusta según tus necesidades
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies') %>%
layout(title = 'Anomaly Detection', xaxis = list(title = 'Timestamp'), yaxis = list(title = 'Count'))
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies') %>%
layout(title = 'Anomaly Detection', xaxis = list(title = 'Timestamp'), yaxis = list(title = 'Count'))
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data')
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies')
res$anoms$anoms
res$anoms
raw_data$count
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies')
memory.limit(size = 16000)  # Ajusta según tus necesidades
res = AnomalyDetectionTs(raw_data,
max_anoms=0.01,
direction='both',
plot=TRUE)
res$anoms
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies') %>%
layout(title = 'Anomaly Detection', xaxis = list(title = 'Timestamp'), yaxis = list(title = 'Count'))
plot_ly() %>%
add_trace(x = raw_data$timestamp, y = raw_data$count, type = 'scatter', mode = 'lines', name = 'Data') %>%
add_trace(x = res$anoms$timestamp, y = res$anoms$anoms, type = 'scatter', mode = 'markers',
marker = list(color = 'red', size = 6), name = 'Anomalies') %>%
layout(title = 'Anomaly Detection', xaxis = list(title = 'Timestamp'), yaxis = list(title = 'Count'))
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"), aes(x = timestamp, y = count), color = "red", size = 2) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
raw_data <- raw_data %>%
mutate(anomaly = ifelse(timestamp %in% res$anoms$timestamp, "Anomaly", "Normal"))
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"), aes(x = timestamp, y = count), color = "red", size = 2) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"), aes(x = timestamp, y = count), color = "red", size = 10) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
data(raw_data)
res <- AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=FALSE)
raw_data <- raw_data %>%
mutate(anomaly = ifelse(timestamp %in% res$anoms$timestamp, "Anomaly", "Normal"))
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"), aes(x = timestamp, y = count), color = "red", size = 10) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
# Detectar anomalías
res <- AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=FALSE)
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
data("raw_data")
# Convertir timestamp a POSIXct
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
res <- AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=FALSE)
raw_data <- raw_data %>%
mutate(anomaly = ifelse(timestamp %in% res$anoms$timestamp, "Anomaly", "Normal"))
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"), aes(x = timestamp, y = count), color = "red", size = 2) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
ggplot(raw_data, aes(x = timestamp, y = count)) +
#geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"),
aes(x = timestamp, y = count),
color = "red", size = 2) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"),
aes(x = timestamp, y = count),
color = "red", size = 10) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
data("raw_data")
# Convertir `timestamp` a `POSIXct`
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
res$anoms$timestamp <- as.POSIXct(res$anoms$timestamp)
# Marcar anomalías usando `inner_join`
raw_data <- raw_data %>%
left_join(res$anoms %>% select(timestamp), by = "timestamp") %>%
mutate(anomaly = ifelse(!is.na(timestamp.y), "Anomaly", "Normal")) %>%
select(-timestamp.y)
data("raw_data")
# Convertir ambos `timestamp` a `POSIXct`
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
res$anoms$timestamp <- as.POSIXct(res$anoms$timestamp)
# Marcar anomalías usando `left_join`
raw_data <- raw_data %>%
left_join(res$anoms %>% select(timestamp) %>% mutate(is_anomaly = TRUE), by = "timestamp") %>%
mutate(anomaly = ifelse(is.na(is_anomaly), "Normal", "Anomaly")) %>%
select(-is_anomaly)
# Crear el gráfico con ggplot2
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"),
aes(x = timestamp, y = count),
color = "red", size = 4) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=FALSE)
data("raw_data")
# Convertir ambos `timestamp` a `POSIXct`
raw_data$timestamp <- as.POSIXct(raw_data$timestamp)
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
plot=FALSE)
res$anoms$timestamp <- as.POSIXct(res$anoms$timestamp)
raw_data <- raw_data %>%
left_join(res$anoms %>% select(timestamp) %>% mutate(is_anomaly = TRUE), by = "timestamp") %>%
mutate(anomaly = ifelse(is.na(is_anomaly), "Normal", "Anomaly")) %>%
select(-is_anomaly)
# Crear el gráfico con ggplot2
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"),
aes(x = timestamp, y = count),
color = "red", size = 4) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
res = AnomalyDetectionTs(raw_data,
max_anoms=0.02,
direction='both',
only_last="day")
res$anoms$timestamp <- as.POSIXct(res$anoms$timestamp)
# Crear el gráfico con ggplot2
ggplot(raw_data, aes(x = timestamp, y = count)) +
geom_line(color = "blue") +
geom_point(data = filter(raw_data, anomaly == "Anomaly"),
aes(x = timestamp, y = count),
color = "red", size = 4) +
labs(title = "Anomaly Detection", x = "Timestamp", y = "Count") +
theme_minimal()
